name: E2E Test

on:
  push:
    branches:
      - main
      - feat/add-install-workflow
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering
    inputs:
      minikube_version:
        description: 'Minikube version (e.g., v1.35.0)'
        required: false
        default: 'v1.35.0'
        type: string
      kubernetes_version:
        description: 'Kubernetes version (e.g., v1.33.1)'
        required: false
        default: 'v1.33.1'
        type: string

env:
  MINIKUBE_VERSION: ${{ inputs.minikube_version || 'v1.35.0' }}
  KUBERNETES_VERSION: ${{ inputs.kubernetes_version || 'v1.33.1' }}

concurrency:
  group: ${{ github.ref_name }}-e2e
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  e2e-test:
    name: End-to-End Test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/${{ env.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/${{ env.MINIKUBE_VERSION }}/minikube-linux-amd64
          chmod +x minikube
          sudo mv minikube /usr/local/bin/

      - name: Start Minikube
        run: |
          minikube start --kubernetes-version=${{ env.KUBERNETES_VERSION }} --driver=docker --memory=4g --cpus=2

      - name: Verify Kubernetes cluster
        run: |
          kubectl cluster-info
          kubectl get nodes
          kubectl get pods -A

      - name: Deploy NGINX Ingress Operator
        run: |
          # Deploy the operator using make deploy with edge image - strictly following manual installation docs
          make deploy IMG=nginx/nginx-ingress-operator:edge
          
          # Wait for the operator to be ready
          kubectl wait --for=condition=Available --timeout=300s deployment/nginx-ingress-operator-controller-manager -n nginx-ingress-operator-system

      - name: Verify Operator Deployment
        run: |
          # Check operator deployment status
          kubectl get deployments -n nginx-ingress-operator-system
          kubectl get pods -n nginx-ingress-operator-system
          
          # Check operator logs
          kubectl logs -l control-plane=controller-manager -n nginx-ingress-operator-system --tail=50

      - name: Deploy Example NGINX Ingress Controller
        run: |
          # Create the namespace and NGINX Ingress Controller instance using OSS minimal example
          kubectl apply -f tests/nginx-ingress-controller-oss.yaml
          
          # Wait for the operator to process the NginxIngress resource and create the deployment
          echo "Waiting for operator to create the deployment..."
          for i in {1..30}; do
            if kubectl get deployment my-nginx-ingress >/dev/null 2>&1; then
              echo "Deployment found after $i attempts"
              break
            fi
            echo "Attempt $i: Deployment not found yet, waiting..."
            sleep 10
          done
          
          # Verify the deployment exists
          kubectl get deployment my-nginx-ingress || exit 1
          
          # Wait for the NGINX Ingress Controller to be ready
          kubectl wait --for=condition=Available --timeout=300s deployment/my-nginx-ingress 
      - name: Verify NGINX Ingress Controller Deployment
        run: |
          # Check all resources in the nginx ingress controller namespace
          kubectl get all -n my-nginx-ingress
          
          # Check if the controller pod is running
          kubectl get pods -n my-nginx-ingress -l app.kubernetes.io/name=nginx-ingress
          
          # Check the service
          kubectl get services -n my-nginx-ingress
          
          # Check ingress class
          kubectl get ingressclass
          
          # Verify controller is ready
          kubectl wait --for=condition=Ready --timeout=60s pod -l app.kubernetes.io/name=nginx-ingress -n my-nginx-ingress

      - name: Verify NGINX Configuration
        run: |
          # Check NGINX configuration is valid
          kubectl exec -n my-nginx-ingress deployment/my-nginx-ingress-controller -- nginx -t

      - name: Check Operator and Controller Logs
        if: always()
        run: |
          echo "=== Operator Logs ==="
          kubectl logs -l control-plane=controller-manager -n nginx-ingress-operator-system --tail=100 || true
          
          echo "=== NGINX Ingress Controller Logs ==="
          kubectl logs -l app.kubernetes.io/name=nginx-ingress -n my-nginx-ingress --tail=100 || true

      - name: Cleanup
        if: always()
        run: |
          # Delete the Minikube cluster
          minikube delete
